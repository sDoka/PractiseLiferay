/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.test.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.test.model.Product;
import com.test.model.ProductModel;
import com.test.model.ProductSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Product service. Represents a row in the &quot;sb_Product&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.test.model.ProductModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductImpl}.
 * </p>
 *
 * @author Michael
 * @see ProductImpl
 * @see com.test.model.Product
 * @see com.test.model.ProductModel
 * @generated
 */
@JSON(strict = true)
public class ProductModelImpl extends BaseModelImpl<Product>
	implements ProductModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a product model instance should use the {@link com.test.model.Product} interface instead.
	 */
	public static final String TABLE_NAME = "sb_Product";
	public static final Object[][] TABLE_COLUMNS = {
			{ "productId", Types.BIGINT },
			{ "productName", Types.VARCHAR },
			{ "weight", Types.INTEGER },
			{ "manufactureDate", Types.TIMESTAMP },
			{ "dateOfSale", Types.TIMESTAMP },
			{ "bakerName", Types.VARCHAR },
			{ "price", Types.DOUBLE },
			{ "office", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table sb_Product (productId LONG not null primary key,productName VARCHAR(75) null,weight INTEGER,manufactureDate DATE null,dateOfSale DATE null,bakerName VARCHAR(75) null,price DOUBLE,office VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table sb_Product";
	public static final String ORDER_BY_JPQL = " ORDER BY product.productId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sb_Product.productId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.test.model.Product"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.test.model.Product"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.test.model.Product"),
			true);
	public static long OFFICE_COLUMN_BITMASK = 1L;
	public static long PRODUCTID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Product toModel(ProductSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Product model = new ProductImpl();

		model.setProductId(soapModel.getProductId());
		model.setProductName(soapModel.getProductName());
		model.setWeight(soapModel.getWeight());
		model.setManufactureDate(soapModel.getManufactureDate());
		model.setDateOfSale(soapModel.getDateOfSale());
		model.setBakerName(soapModel.getBakerName());
		model.setPrice(soapModel.getPrice());
		model.setOffice(soapModel.getOffice());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Product> toModels(ProductSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Product> models = new ArrayList<Product>(soapModels.length);

		for (ProductSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.test.model.Product"));

	public ProductModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _productId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProductId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _productId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Product.class;
	}

	@Override
	public String getModelClassName() {
		return Product.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("productId", getProductId());
		attributes.put("productName", getProductName());
		attributes.put("weight", getWeight());
		attributes.put("manufactureDate", getManufactureDate());
		attributes.put("dateOfSale", getDateOfSale());
		attributes.put("bakerName", getBakerName());
		attributes.put("price", getPrice());
		attributes.put("office", getOffice());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long productId = (Long)attributes.get("productId");

		if (productId != null) {
			setProductId(productId);
		}

		String productName = (String)attributes.get("productName");

		if (productName != null) {
			setProductName(productName);
		}

		Integer weight = (Integer)attributes.get("weight");

		if (weight != null) {
			setWeight(weight);
		}

		Date manufactureDate = (Date)attributes.get("manufactureDate");

		if (manufactureDate != null) {
			setManufactureDate(manufactureDate);
		}

		Date dateOfSale = (Date)attributes.get("dateOfSale");

		if (dateOfSale != null) {
			setDateOfSale(dateOfSale);
		}

		String bakerName = (String)attributes.get("bakerName");

		if (bakerName != null) {
			setBakerName(bakerName);
		}

		Double price = (Double)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		String office = (String)attributes.get("office");

		if (office != null) {
			setOffice(office);
		}
	}

	@JSON
	@Override
	public long getProductId() {
		return _productId;
	}

	@Override
	public void setProductId(long productId) {
		_productId = productId;
	}

	@JSON
	@Override
	public String getProductName() {
		if (_productName == null) {
			return StringPool.BLANK;
		}
		else {
			return _productName;
		}
	}

	@Override
	public void setProductName(String productName) {
		_productName = productName;
	}

	@JSON
	@Override
	public int getWeight() {
		return _weight;
	}

	@Override
	public void setWeight(int weight) {
		_weight = weight;
	}

	@JSON
	@Override
	public Date getManufactureDate() {
		return _manufactureDate;
	}

	@Override
	public void setManufactureDate(Date manufactureDate) {
		_manufactureDate = manufactureDate;
	}

	@JSON
	@Override
	public Date getDateOfSale() {
		return _dateOfSale;
	}

	@Override
	public void setDateOfSale(Date dateOfSale) {
		_dateOfSale = dateOfSale;
	}

	@JSON
	@Override
	public String getBakerName() {
		if (_bakerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _bakerName;
		}
	}

	@Override
	public void setBakerName(String bakerName) {
		_bakerName = bakerName;
	}

	@JSON
	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		_price = price;
	}

	@JSON
	@Override
	public String getOffice() {
		if (_office == null) {
			return StringPool.BLANK;
		}
		else {
			return _office;
		}
	}

	@Override
	public void setOffice(String office) {
		_columnBitmask |= OFFICE_COLUMN_BITMASK;

		if (_originalOffice == null) {
			_originalOffice = _office;
		}

		_office = office;
	}

	public String getOriginalOffice() {
		return GetterUtil.getString(_originalOffice);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Product.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Product toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Product)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductImpl productImpl = new ProductImpl();

		productImpl.setProductId(getProductId());
		productImpl.setProductName(getProductName());
		productImpl.setWeight(getWeight());
		productImpl.setManufactureDate(getManufactureDate());
		productImpl.setDateOfSale(getDateOfSale());
		productImpl.setBakerName(getBakerName());
		productImpl.setPrice(getPrice());
		productImpl.setOffice(getOffice());

		productImpl.resetOriginalValues();

		return productImpl;
	}

	@Override
	public int compareTo(Product product) {
		long primaryKey = product.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Product)) {
			return false;
		}

		Product product = (Product)obj;

		long primaryKey = product.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ProductModelImpl productModelImpl = this;

		productModelImpl._originalOffice = productModelImpl._office;

		productModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Product> toCacheModel() {
		ProductCacheModel productCacheModel = new ProductCacheModel();

		productCacheModel.productId = getProductId();

		productCacheModel.productName = getProductName();

		String productName = productCacheModel.productName;

		if ((productName != null) && (productName.length() == 0)) {
			productCacheModel.productName = null;
		}

		productCacheModel.weight = getWeight();

		Date manufactureDate = getManufactureDate();

		if (manufactureDate != null) {
			productCacheModel.manufactureDate = manufactureDate.getTime();
		}
		else {
			productCacheModel.manufactureDate = Long.MIN_VALUE;
		}

		Date dateOfSale = getDateOfSale();

		if (dateOfSale != null) {
			productCacheModel.dateOfSale = dateOfSale.getTime();
		}
		else {
			productCacheModel.dateOfSale = Long.MIN_VALUE;
		}

		productCacheModel.bakerName = getBakerName();

		String bakerName = productCacheModel.bakerName;

		if ((bakerName != null) && (bakerName.length() == 0)) {
			productCacheModel.bakerName = null;
		}

		productCacheModel.price = getPrice();

		productCacheModel.office = getOffice();

		String office = productCacheModel.office;

		if ((office != null) && (office.length() == 0)) {
			productCacheModel.office = null;
		}

		return productCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{productId=");
		sb.append(getProductId());
		sb.append(", productName=");
		sb.append(getProductName());
		sb.append(", weight=");
		sb.append(getWeight());
		sb.append(", manufactureDate=");
		sb.append(getManufactureDate());
		sb.append(", dateOfSale=");
		sb.append(getDateOfSale());
		sb.append(", bakerName=");
		sb.append(getBakerName());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", office=");
		sb.append(getOffice());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.test.model.Product");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>productId</column-name><column-value><![CDATA[");
		sb.append(getProductId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productName</column-name><column-value><![CDATA[");
		sb.append(getProductName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weight</column-name><column-value><![CDATA[");
		sb.append(getWeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufactureDate</column-name><column-value><![CDATA[");
		sb.append(getManufactureDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfSale</column-name><column-value><![CDATA[");
		sb.append(getDateOfSale());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bakerName</column-name><column-value><![CDATA[");
		sb.append(getBakerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>office</column-name><column-value><![CDATA[");
		sb.append(getOffice());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Product.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Product.class
		};
	private long _productId;
	private String _productName;
	private int _weight;
	private Date _manufactureDate;
	private Date _dateOfSale;
	private String _bakerName;
	private double _price;
	private String _office;
	private String _originalOffice;
	private long _columnBitmask;
	private Product _escapedModel;
}